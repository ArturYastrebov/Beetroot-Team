Задача:
Используя asyncio cоздать клиент и сервер. Создать тест для проверки заданой функциональности
Клиент:
1) Шлёт реквест
2)Ожидает респонс от сервера
Сервер:
1)Ожидает любой входящий пакет и превращает его в ожидаемую репрезентацию
2)Ожидает случайный таймаут от 2 до 5 секунд
3)Реквесты принимаются и обрабатываются асинхронно.
Это значит, что если клиент ~одновременно отправит два реквеста на которые выпадает
таймаут 2 и 3 секунды соответственно то первый респонс будет получен спустя ~2
секунды после отправки, а второй спустя ~3
&& - разделитель параметров
%% - разделитель сущностей
Формат пакета JSON:
Пакет содержит:
request_id - уникальный идентификатор реквеста
Data - поле с данными которые нужно конвертить в ожидаемый формат
Структура data
{Entity_name}&&{param1name}&&{param1value}&&{param2name}&&{param2value}...%%{En
tity_name}...
Пустые элементы не должны входить в конечный результат
Пример:
Формат: JSON с полями request_id и data
REQ =
{
"request_id":"01",
"data":"Car1&&name&&some_name&&speed&&25%%Car2&&speed&&35%%"}

RESP =
{
'request_id': '01',
'data': {
'Car1': {'name': 'some_name',
'speed': '25', reaction: "Nothing"},
'Car2': {'speed', '35', reaction: "Nothing"}
}
}
Сервер имитирует реакцию системы контроля скорости и имеет следующие характеристики:
• Если вы едете со скоростью 50 км/ч или меньше, ничего не произойдет.(Reaction - Nothing) 
• Если вы едете со скоростью более 50 км/ч, но не более 55 км/ч, вы получите предупреждение.(Warning)
• Если вы едете со скоростью более 55 км/ч, но не более 60 км/ч, вы будете оштрафованы.(Penalty)
• Если вы едете со скоростью более 60 км/ч, действие ваших водительских прав будет приостановлено.(Revoke License)
• Скорость в км/ч доступна системе как целочисленное значение.

2. С помощью pytest написать параметризированный тест, который исходя из значений скорости отправляет на сервер реквест с соответсвующей скоростю и получает респонс который мы ожидаем из условия

